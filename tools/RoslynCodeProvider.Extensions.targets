<Project DefaultTargets="UnitTest" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <NupkgToolPath>$(RepositoryRoot)src\Packages\Microsoft.CodeDom.Providers.DotNetCompilerPlatform\tools\</NupkgToolPath>
        <LocalRoslynFolderName>Roslyn45</LocalRoslynFolderName>
        <LocalLatestRoslynFolderName>RoslynLatest</LocalLatestRoslynFolderName>
    </PropertyGroup>
    
    <UsingTask TaskName="DownloadRoslynBinaries" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <NupkgToolPath ParameterType="System.String" Required="true" />
      <LocalRoslynFolderName ParameterType="System.String" Required="true" />
      <LocalLatestRoslynFolderName ParameterType="System.String" Required="true" />
      <ReferenceRoslynNupkgVersion ParameterType="System.String" Required="true" />
      <ReferenceLatestRoslynNupkgVersion ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System" />
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Using Namespace="System.Net" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try
                {
                   using (var wc = new WebClient())
                    {
                        var roslynNugetBaseUri = "https://api.nuget.org/packages/microsoft.net.compilers.{0}.nupkg";
                        var roslynPackageName = "microsoft.net.compilers.{0}.nupkg";

                        var targetFilePath = Path.Combine(Path.GetTempPath(), string.Format(roslynPackageName, ReferenceRoslynNupkgVersion));
                        var targetExtractPath = Path.Combine(Path.GetTempPath(), LocalRoslynFolderName);
                        var targetPath = Path.Combine(NupkgToolPath, LocalRoslynFolderName);
                        if (Directory.Exists(targetExtractPath))
                        {
                            Directory.Delete(targetExtractPath, true);
                        }
                        if (Directory.Exists(targetPath))
                        {
                            Directory.Delete(targetPath, true);
                        }

                        wc.DownloadFile(string.Format(roslynNugetBaseUri, ReferenceRoslynNupkgVersion), targetFilePath);
                        ZipFile.ExtractToDirectory(targetFilePath, targetExtractPath);
                        Directory.CreateDirectory(targetPath);
                        foreach(var file in Directory.GetFiles(Path.Combine(targetExtractPath, "tools"))){
                            var fi = new FileInfo(file);
                            File.Copy(file, Path.Combine(targetPath, fi.Name));
                        }

                        targetFilePath = Path.Combine(Path.GetTempPath(), string.Format(roslynPackageName, ReferenceLatestRoslynNupkgVersion));
                        targetExtractPath = Path.Combine(Path.GetTempPath(), LocalLatestRoslynFolderName);
                        targetPath = Path.Combine(NupkgToolPath, LocalLatestRoslynFolderName);
                        if (Directory.Exists(targetExtractPath))
                        {
                            Directory.Delete(targetExtractPath, true);
                        }
                        if (Directory.Exists(targetPath))
                        {
                            Directory.Delete(targetPath, true);
                        }

                        wc.DownloadFile(string.Format(roslynNugetBaseUri, ReferenceLatestRoslynNupkgVersion), targetFilePath);
                        ZipFile.ExtractToDirectory(targetFilePath, targetExtractPath);
                        Directory.CreateDirectory(targetPath);
                        foreach (var file in Directory.GetFiles(Path.Combine(targetExtractPath, "tools")))
                        {
                            var fi = new FileInfo(file);
                            File.Copy(file, Path.Combine(targetPath, fi.Name));
                        }
                    }
                }
                catch (Exception ex)
                {
                  Log.LogErrorFromException(ex);
                }
                return true;
                ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
